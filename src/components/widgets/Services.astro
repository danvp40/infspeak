---
import { Icon } from 'astro-icon';

interface Action {
  label: string;
  href?: string;
}

interface Demo {
  data: object;
}

interface Service {
  key: string;
  label: string;
  icon: string;
  image: string;
  header: string;
  salepoints: Array<string>;
  action?: Action;
  demo?: Demo;
}

export interface Props {
  services: Array<Service>;
  defaultTab: string;
}

const { services, defaultTab } = Astro.props;
---

<section class="relative">
  <div class="max-w-6xl mx-auto md:min-h-[800px] p-4 md:p-8 bg-zinc-100">
    <h3 class="font-bold text-3xl">See What's inside</h3>
    <div
      x-data={`{ activeTab: null, services:  ${JSON.stringify(services)}}`}
      x-init={`activeTab = window.location.hash ? window.location.hash.replace('#', '') : '${defaultTab}'`}
    >
      <div class="tab-container w-full overflow-x-auto overflow-y-hidden">
        <ul class="tabs w-auto inline-flex md:grid md:grid-cols-6 border-b-2 border-zinc-200 gap-4">
          {
            services.map((service) => {
              return (
                <li x-data={`{tabName: "${service.key}"}`} class="min-w-[140px]">
                  <a
                    x-on:click="activeTab = tabName"
                    href={'#' + service.key}
                    class="tab"
                    x-bind:class="{ 'active': activeTab === tabName}"
                  >
                    <img src={service.icon} alt={service.label} class="w-[100px]" />
                    <span set:html={service.label} />
                  </a>
                </li>
              );
            })
          }
        </ul>
      </div>

      <div class="content pt-6 pb-8 relative">
        {
          services.map((service) => {
            return (
              <div
                x-cloak
                x-data={`{animating: false, animated: false, tabName: '${service.key}'}`}
                x-show="activeTab === tabName"
                x-init="
            setTimeout(() => {
              if($el.getBoundingClientRect().top < (window.innerHeight - 100) && activeTab == tabName){
                 animating = true;
              }
            }, 100)
            
            $watch('activeTab', (value) => {
              if(value == tabName && $el.getBoundingClientRect().top < (window.innerHeight - 100)){
                animated = false;
                animating = true;
              }
            })
            "
                @scroll.window="if($el.getBoundingClientRect().top < (window.innerHeight - 100) && activeTab == tabName && !animated) animating = true;"
                x-transition:enter="transition ease-out duration-300 z-20"
                x-transition:enter-start="opacity-0 scale-90"
                x-transition:enter-end="opacity-100 scale-100"
                x-transition:leave="opacity-0 absolute"
              >
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  <div class="pt-6 md:pt-8">
                    <h3 set:html={service.header} class="text-lg md:text-2xl font-medium" />
                    <ul class="list-disc pl-3 max-w-[500px] mt-5 md:mt-8 text-base md:text-lg">
                      {service.salepoints.map((item: string) => (
                        <li set:html={item} class="mt-2 md:mt-5 pl-2" />
                      ))}
                    </ul>
                    {service.action ? (
                      <a
                        href={service.action.href}
                        set:html={service.action.label}
                        class="inline-block border border-gray-900 rounded-full px-6 py-2.5 md:py-3.5 mt-5 md:mt-7 text-sm md:text-base"
                      />
                    ) : null}
                  </div>
                  <div class="mt-4 lg:mt-0 overflow-hidden">
                    {service.demo ? (
                      <div class="container">
                        <div class="grid gap-4 grid-cols-3 pl-10 md:pl-0">
                          {service.demo.data.map((item, index) => {
                            return (
                              <div class="pt-5">
                                <div class="report-value grid grid-cols-2">
                                  <div class="text-right pr-2 pt-2 whitespace-nowrap">
                                    <h4 class="uppercase font-bold text-[10px] md:text-sm relative">
                                      <span class="opacity-0">1-space</span>
                                      <span class="absolute text-gray-600 right-0 top-0">{item.label}</span>
                                    </h4>
                                    <h4 class="text-cyan-500 font-bold text-sm md:text-xl relative">
                                      <span class="opacity-0">1-space</span>
                                      <span class="absolute right-0 top-0 whitespace-nowrap">
                                        {Array.isArray(item.data) ? (
                                          <div class="flex gap-2">
                                            {item.data.map(({ value, suffix }) => {
                                              return (
                                                <span
                                                  x-data={`animateCounter(${value})`}
                                                  x-init="
                                          if(animating) updatecounter(); 
                                          $watch('animating', (value) => {
                                            if(value){
                                              current = start;
                                              updatecounter();
                                            }
                                          });"
                                                >
                                                  <span x-text="display" />
                                                  <span class="-ml-0.5">{suffix}</span>
                                                </span>
                                              );
                                            })}
                                          </div>
                                        ) : (
                                          <span
                                            x-data={`animateCounter(${item.data.value})`}
                                            x-init="
                                          if(animating) updatecounter(); 
                                          $watch('animating', (value) => {
                                            if(value){
                                              current = start;
                                              updatecounter();
                                            }
                                          });"
                                            class="whitespace-nowrap"
                                          >
                                            <span x-text="display" />
                                            {item.data.suffix ? (
                                              <span
                                                class={item.data.suffixClass || '-ml-0.5'}
                                                set:html={item.data.suffix}
                                              />
                                            ) : null}

                                            {item.data.icon ? (
                                              <span class="-ml-1.5">
                                                <Icon name={item.data.icon} class={item.data.iconClass} />
                                              </span>
                                            ) : null}
                                          </span>
                                        )}
                                      </span>
                                    </h4>
                                  </div>
                                  <div class="stick h-full border-l border-primary" />
                                </div>
                                <div class="report-chart flex justify-center">
                                  <div
                                    class:list={[
                                      'circle',
                                      {
                                        'circle-l': index < 2,
                                        'half-circle': index == 2,
                                        'circle-r': index > 2,
                                        end: index == 3,
                                      },
                                    ]}
                                  >
                                    <div class="inner p-1 relative">
                                      <img
                                        src={item.image}
                                        class="rounded-full w-[56px] md:w-28 h-[56px] md:h-28"
                                        alt={item.label}
                                      />
                                      <div class="arrow" />
                                    </div>
                                  </div>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    ) : (
                      <img src={service.image} alt={service.label} />
                    )}
                  </div>
                </div>
              </div>
            );
          })
        }
      </div>
    </div>
  </div>
</section>

<style>
  .tab-container::-webkit-scrollbar {
    display: none;
  }

  .tab-container {
    scrollbar-width: none;
  }
  .tabs .tab {
    @apply text-center flex flex-col gap-2 items-center -mb-[2px] py-6;
  }

  .tabs .tab.active {
    @apply border-b-2 border-primary;
  }
  .tabs .tab img {
  }
  .tabs .tab.active img {
    @apply -rotate-180;
    @apply transition-transform ease-in-out duration-300;
  }

  .stick {
    transform: translate(-1px, 1px);
    position: relative;
  }

  .stick::before {
    @apply absolute border border-primary rounded-full;
    content: '';
    width: 9px;
    height: 9px;
    top: -9px;
    left: -5px;
  }

  .circle {
    @apply rounded-full border border-primary border-t-transparent rotate-45;
  }

  .circle > .inner {
    @apply -rotate-45;
  }

  .circle-r {
    @apply -rotate-45;
  }

  .circle-r > .inner {
    @apply rotate-45;
  }

  .half-circle {
    @apply border-r-transparent;
  }

  .end .arrow {
    display: none;
  }

  .arrow {
    @apply w-px absolute h-3 border-x border-l-transparent border-primary;
  }
  .arrow:after {
    @apply border-primary absolute;
    content: '';

    border-width: 5px;
    border-bottom-width: 0;
    border-left: solid 4px transparent;
    border-right: solid 4px transparent;
    bottom: -5px;
    left: -3.5px;
  }

  .circle-l .arrow {
    @apply top-1/2 origin-top -rotate-90;
    right: -1px;
  }

  .circle-r .arrow {
    @apply top-1/2 origin-top rotate-90;
    left: -1px;
  }

  .half-circle .arrow {
    @apply bottom-0 left-1/2;
    transform: translate(-1px, 100%);
  }
</style>

<script>
  window.animateCounter = function (target, time = 100, start = 0) {
    return {
      current: 0,
      display: 0,
      target: target,
      time: time,
      start: start,
      my_animating: false,
      updatecounter: function () {
        if (this.animated || this.my_animating) return;

        start = this.start;
        this.my_animating = true;
        const increment = (this.target - start) / this.time;
        const handle = setInterval(() => {
          if (this.current < this.target) {
            this.current += increment;
            this.display = Number.isInteger(this.target) ? Math.round(this.current) : this.current.toFixed(1);
          } else {
            clearInterval(handle);
            this.display = this.target;
            this.animated = true;
            this.animating = false;
            this.my_animating = false;
          }
        }, 1);
      },
    };
  };
</script>
